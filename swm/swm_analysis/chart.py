import os
import io
import pandas as pd
import numpy as np
from django.conf import settings
import matplotlib.pyplot as plt
import urllib, base64
import textwrap

# base path for data folder
DATA_DIR = os.path.join(settings.BASE_DIR, "swm_analysis", "data")

data16to18 = pd.read_csv(os.path.join(DATA_DIR, "2016to2018.csv"))
data19 = pd.read_csv(os.path.join(DATA_DIR, "2019.csv"))
data20 = pd.read_csv(os.path.join(DATA_DIR, "2020.csv"))
data21 = pd.read_csv(os.path.join(DATA_DIR, "2021.csv"))
data22 = pd.read_csv(os.path.join(DATA_DIR, "2022.csv"))

merged1 = pd.merge(data16to18, data19, left_on=data16to18.columns[1], right_on=data19.columns[1], how='inner')
merged2 = pd.merge(merged1, data20, left_on=merged1.columns[1], right_on=data20.columns[1], how='inner')
merged3 = pd.merge(merged2, data21, left_on=merged2.columns[1], right_on=data21.columns[1], how='inner')
merged_all = pd.merge(merged3.drop(columns='Sl. No._x'), data22, left_on=merged3.columns[1], right_on=data22.columns[1], how='inner')
states=merged_all['States/UTs']#extracting names of the states/UT
states=[s.lstrip() for s in states] #eliminating white spaces in front of statenames
wards=merged_all['Municipal Solid Waste Management - Total Wards (Nos.)']
wrappedstates=['\n'.join(textwrap.wrap(l, 20)) for l in states] #for xtick labeling
#Waste Generation Analysis
wastegen16=merged_all['Total waste generation (Metric Tonnes Per Day) - Dec-2016']
wastegen17=merged_all['Total waste generation (Metric Tonnes Per Day) - Dec-2017']
wastegen18=merged_all['Total waste generation (Metric Tonnes Per Day) - Dec-2018']
wastegen19=merged_all['Total waste generation (MT/D)']
wastegen20=merged_all['Solid waste generated (TPD)']
wastegen21=merged_all['Solid Waste Management - Total waste generation MetricTonnes per day (MT/D)']
wastegen22=merged_all['Municipal Solid Waste Management - Total waste generation (MT/D)']
totalwastegen=wastegen16+wastegen17+wastegen18+wastegen19+wastegen21+wastegen22


avgwastegenperward16=wastegen16/wards
avgwastegenperward17=wastegen17/wards
avgwastegenperward18=wastegen18/wards
avgwastegenperward19=wastegen19/wards
avgwastegenperward20=wastegen20/wards
avgwastegenperward21=wastegen21/wards
avgwastegenperward22=wastegen22/wards



wasteproc16=merged_all['Total waste processing (in percentage) - Dec-2016']
wasteproc17=merged_all['Total waste processing (in percentage) - Dec-2017']
wasteproc18=merged_all['Total waste processing (in percentage) - Dec-2018']
wasteproc19=merged_all['Total waste processing - %']
waste_proc20=merged_all['Treated (TPD)'].fillna(0)
wasteproc21=merged_all['Solid Waste Management - Total wasteprocessing']
wasteproc22=merged_all['Municipal Solid Waste Management - Total waste processing']
wasteproc22=[int(proc[:-1]) for proc in wasteproc22]
waste_proc16=wastegen16*wasteproc16/100
waste_proc17=wastegen17*wasteproc17/100
waste_proc18=wastegen18*wasteproc18/100
waste_proc19=wastegen19*wasteproc19/100
waste_proc21=wastegen21*wasteproc21/100
waste_proc22=wastegen22*wasteproc22/100

years = [2016, 2017, 2018, 2019, 2020, 2021, 2022]
wastegen = [wastegen16, wastegen17, wastegen18, wastegen19, wastegen20, wastegen21, wastegen22]
wasteproc = [waste_proc16, waste_proc17, waste_proc18, waste_proc19, waste_proc20, waste_proc21, waste_proc22]

def get_all_states():
    return states

def total_waste_chart():

    plt.figure(figsize=(16,20 )) 
    plt.bar(states,wastegen16, color='red')
    plt.bar(states,wastegen17,bottom=wastegen16, color='blue')
    plt.bar(states,wastegen18,bottom=wastegen16+wastegen17,color='green')
    plt.bar(states,wastegen19,bottom=wastegen16+wastegen17+wastegen18,color='cyan')
    plt.bar(states,wastegen20,bottom=wastegen16+wastegen17+wastegen18+wastegen19,color='magenta')
    plt.bar(states,wastegen21,bottom=wastegen16+wastegen17+wastegen18+wastegen19+wastegen20,color='orange')
    plt.bar(states,wastegen22,bottom=wastegen16+wastegen17+wastegen18+wastegen19+wastegen20+wastegen21,color='yellow')
    plt.xlabel("States")
    plt.xticks(range(len(states)),wrappedstates,rotation=90)
    plt.ylabel("Waste Generated")
    # calculate max stacked height per state
    total_per_state = (wastegen16 + wastegen17 + wastegen18 + 
                       wastegen19 + wastegen20 + wastegen21 + wastegen22)
    plt.yticks(np.arange(0, total_per_state.max() + 50000, 5000))
   
    plt.legend(["2016", "2017", "2018","2019", "2020","2021", "2022"])
    plt.title("Total Waste Generated by State-year wise (2016-2022)")
   

    # Save plot to string buffer
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    string = base64.b64encode(buffer.read())
    uri = urllib.parse.quote(string)
    buffer.close()
    return uri

def avg_waste_chart():
    avgwastegenperward= {
        "2016": avgwastegenperward16,
        "2017": avgwastegenperward17,
        "2018": avgwastegenperward18,
        "2019": avgwastegenperward19,
        "2020": avgwastegenperward20,
        "2021": avgwastegenperward21,
        "2022": avgwastegenperward22
    }


    plt.figure(figsize=(16, 20)) 
    colors = ["red", "blue", "green", "cyan", "magenta", "orange","yellow"]


    bottom = np.zeros(len(states)) 
    for (year, data), color in zip(avgwastegenperward.items(), colors):
        plt.bar(states, data, bottom=bottom, label=year, color=color)
        bottom += data 

    plt.xlabel("States")
    plt.xticks(range(len(states)),wrappedstates,rotation=90)
    plt.ylabel("Waste Generated per ward")
    plt.yticks(np.arange(0, max(bottom)+50, 10)) 
    plt.title("Average waste generated per ward by State (2016-2022)")
    plt.legend(title="Year")



    # Save plot to string buffer
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    string = base64.b64encode(buffer.read())
    uri = urllib.parse.quote(string)
    buffer.close()
    return uri



def show_wasteprocessed(statename):
 
    stateindex=states.index(statename)
    processed = [wp[stateindex] for wp in wasteproc]
    unprocessed = [wg[stateindex] - wp[stateindex] for wg, wp in zip(wastegen, wasteproc)]

    fig, axes = plt.subplots(3, 3, figsize=(17, 15))
    axes = axes.flatten()

    fig.suptitle(f'Statistics of Waste Management - {statename}', fontsize=16)

    for i, year in enumerate(years):
        axes[i].set_title(f'{year}\nTotal waste generated = {wastegen[i][stateindex]} MT/D')
        axes[i].pie(
            [unprocessed[i], processed[i]],
            labels=[f'Unprocessed={unprocessed[i]}', f'Processed={processed[i]}'],
            colors=['red', 'blue'],
            explode=[0, 0.1],
            autopct='%1.1f%%'
        )

    # hide unused subplot 
    if len(years) < len(axes):
        for j in range(len(years), len(axes)):
            axes[j].axis("off")

    fig.tight_layout()

    # Save plot to string buffer
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    string = base64.b64encode(buffer.read())
    uri = urllib.parse.quote(string)
    buffer.close()
    return uri
